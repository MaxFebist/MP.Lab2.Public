
// Lab 2(1) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#pragma once
namespace combi
{
	struct subset
	{
		short n,
			sn,
			*sset;
		unsigned __int64 mask;
		subset(short n = 1);
		short getfirst();
		short getnext();
		short ntx(short i);
		unsigned __int64 count();
		void reset();
	};
}




// Lab 2(2) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
namespace combi2
{
	struct  xcombination           // генератор  сочетаний (эвристика) 
	{
		short  n,                  // количество элементов исходного множества  
			m,                  // количество элементов в сочетаниях 

			*sset;            	  // массив индексов текущего сочетания  
		xcombination(
			short n = 1, //количество элементов исходного множества  
			short m = 1  // количество элементов в сочетаниях
		);
		void reset();              // сбросить генератор, начать сначала 
		short getfirst();          // сформировать первый массив индексов    
		short getnext();           // сформировать следующий массив индексов  
		short ntx(short i);        // получить i-й элемент массива индексов  
		unsigned __int64 nc;       // номер сочетания  0,..., count()-1   
		unsigned __int64 count() const;  // вычислить количество сочетаний      
	};
};




// Lab 2(3) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
namespace combi3
{
	struct  permutation    // генератор   перестановок     
	{
		const static bool L = true;  // левая стрелка 
		const static bool R = false; // правая стрелка   

		short  n,              // количество элементов исходного множества 
			*sset;           // массив индексов текущей перестановки
		bool  *dart;           // массив  стрелок (левых-L и правых-R) 
		permutation(short n = 1); // конструктор (количество элементов исходного множества) 

		void reset();                // сбросить генератор, начать сначала 

		__int64 getfirst();          // сформировать первый массив индексов    
		__int64 getnext();           // сформировать случайный массив индексов  

		short ntx(short i);          // получить i-й элемент масива индексов 
		unsigned __int64 np;         // номер перествновки 0,... count()-1 

		unsigned __int64 count() const;  // вычислить общее кол. перестановок    
	};
};




// Lab 2(4) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<




// Lab 2(5) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<